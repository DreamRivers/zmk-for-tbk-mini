/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E   &kp R      &kp T   &kp Y  &kp U      &kp I          &kp O    &kp P          &kp LEFT_ALT
&kp LEFT_SHIFT    &kp A  &kp S  &kp D   &kp F      &kp G   &kp H  &kp J      &kp K          &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C   &kp V      &kp B   &kp N  &kp M      &kp COMMA      &kp DOT  &kp FSLH       &none
                                &tog 2  &kp ENTER  &tog 1  &mo 1  &kp SPACE  &kp BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4        &kp F5            &kp F6       &kp F7          &kp F8             &kp F9         &kp F10  &kp F11  &kp F12
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4      &kp N5       &kp NUMBER_6    &kp N7             &kp N8         &kp N9   &kp N0   &kp NON_US_BACKSLASH
&none      &none         &none         &kp MINUS     &kp LEFT_BRACKET  &kp AT_SIGN  &kp PERIOD      &kp RIGHT_BRACKET  &kp EQUAL      &none    &none    &tog 0
                                       &tog 0        &kp CAPSLOCK      &tog 2       &kp LEFT_SHIFT  &kp SPACE          &kp BACKSPACE
            >;
        };

        layer_2 {
            bindings = <
&none  &none  &kp LS(F10)  &kp RS(F9)     &kp LA(ENTER)  &none          &kp PRINTSCREEN  &kp PAGE_UP           &kp UP_ARROW    &kp PAGE_DOWN          &kp LG(R)  &kp HOME
&none  &none  &none        &kp LC(SLASH)  &kp LC(F)      &kp LS(LC(L))  &none            &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW        &none      &none
&none  &none  &none        &kp LC(Z)      &kp LC(C)      &kp LC(V)      &none            &kp LC(LEFT_BRACKET)  &none           &kp LC(RIGHT_BRACKET)  &none      &tog 0
                           &tog 1         &kp ENTER      &tog 0         &kp LEFT_WIN     &kp SPACE             &kp DEL
            >;
        };
    };
};
